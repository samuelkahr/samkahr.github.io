"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const analytics_node_1 = __importDefault(require("analytics-node"));
const analytics_1 = __importDefault(require("../analytics"));
const config_1 = require("./config");
const node_machine_id_1 = require("node-machine-id");
/**
 * Decorator for CLI command handlers, in order to fire off standard analytics.
 */
function reportAnalytics(args, f) {
    return __awaiter(this, void 0, void 0, function* () {
        const startTime = process.hrtime();
        // Attempt to read a config, if one is available.
        let cfg;
        try {
            cfg = yield config_1.getConfig(args.config);
        }
        catch (err) {
            yield reportError('Failed to open typewriter.yml config', err, yield getAnonymousId(args, cfg), args, cfg);
            throw err;
        }
        // Run the command itself.
        try {
            yield f(cfg);
        }
        catch (err) {
            yield reportError(`Failed to call ${getCommand(args)} command handler`, err, yield getAnonymousId(args, cfg), args, cfg);
            throw err;
        }
        // Record how long this command took.
        const [sec, nsec] = process.hrtime(startTime);
        const ms = sec * 1000 + nsec / 1000000;
        // Fire analytics to Segment on typewriter usage.
        analytics_1.default.commandRun({
            properties: Object.assign({}, (yield typewriterLibraryProperties(args, cfg)), { duration: Math.round(ms) }),
            anonymousId: yield getAnonymousId(args, cfg),
        });
    });
}
exports.reportAnalytics = reportAnalytics;
// Initialize analytics-node + typewriter's typewriter client.
const writeKey = process.env.IS_DEVELOPMENT
    ? // Development: https://app.segment.com/segment_prod/sources/typewriter_dev/overview
        'NwUMoJltCrmiW5gQZyiyvKpESDcwsj1r'
    : // Production: https://app.segment.com/segment_prod/sources/typewriter/overview
        'ahPefUgNCh3w1BdkWX68vOpVgR2Blm5e';
analytics_1.default.setTypewriterOptions({
    analytics: new analytics_node_1.default(writeKey, {
        flushAt: 1,
    }),
});
/** Helper to fetch the name of the current yargs CLI command. */
function getCommand(args) {
    return args._.length === 0 ? 'update' : args._.join(' ');
}
/**
 * Helper to generate the shared library properties shared by all analytics calls.
 * See: https://app.segment.com/segment_prod/protocols/libraries/rs_1OL4GFYCh62cOIRi3PJuIOdN7uM
 */
function typewriterLibraryProperties(args, cfg) {
    return __awaiter(this, void 0, void 0, function* () {
        return {
            /* eslint-disable @typescript-eslint/camelcase */
            client: cfg && {
                language: cfg.client.language,
                sdk: cfg.client.sdk,
            },
            command: getCommand(args),
            is_ci: Boolean(process.env.CI),
            token_method: yield config_1.getTokenMethod(cfg),
            tracking_plan: cfg && cfg.trackingPlans && cfg.trackingPlans.length > 0
                ? {
                    id: cfg.trackingPlans[0].id,
                    workspace_slug: cfg.trackingPlans[0].workspaceSlug,
                }
                : undefined,
        };
    });
}
/**
 * Helper to fire an `Error Fired` analytics call. Async so that consumers
 * can await this analytics call before re-throwing any errors.
 */
function reportError(errorString, error, anonymousId, args, cfg) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            analytics_1.default.errorFired({
                /* eslint-disable @typescript-eslint/camelcase */
                properties: Object.assign({}, (yield typewriterLibraryProperties(args, cfg)), { error_string: errorString, 
                    // TODO:
                    unexpected: true, error }),
                anonymousId,
            }, resolve);
        }));
    });
}
/**
 * We generate an anonymous ID that is unique per user, s.t. we can group analytics from
 * the same user together.
 */
function getAnonymousId(args, cfg) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return yield node_machine_id_1.machineId(false);
        }
        catch (err) {
            yield reportError('Failed to get anonymous id.', err, 'unknown', args, cfg);
        }
        return 'unknown';
    });
}
//# sourceMappingURL=reportAnalytics.js.map