"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * For Segmenters, see:
 *   https://paper.dropbox.com/doc/Typewriter-Error-Paths--AlUBLKIIcRc_9UU3_sgAh~9YAg-bdjW1EOlEHeomztWLrYWk
 */
const react_1 = __importStar(require("react"));
const ink_1 = require("ink");
const ink_link_1 = __importDefault(require("ink-link"));
const figures_1 = __importDefault(require("figures"));
const package_json_1 = require("../../../package.json");
/** Helper to wrap an error with a human-readable description. */
function wrapError(description, error, ...notes) {
    return {
        isWrappedError: true,
        description,
        notes,
        error,
    };
}
exports.wrapError = wrapError;
function isWrappedError(error) {
    return typeof error === 'object' && error.isWrappedError;
}
exports.isWrappedError = isWrappedError;
/** TODO: we need to make sure we exit with a status code if a fatal error is raised. */
exports.ErrorBoundary = ({ children, logError }) => {
    const [err, setError] = react_1.useState();
    const content = (react_1.default.createElement(ink_1.Box, { flexDirection: "column" },
        err && react_1.default.createElement(exports.ErrorComponent, { error: err, logError: logError }),
        !err && react_1.default.cloneElement(children, { setError })));
    return content;
};
exports.ErrorComponent = ({ error, logError }) => {
    react_1.useEffect(() => {
        logError(error);
    }, [error]);
    if (isWrappedError(error)) {
        const wrappedError = error;
        return (react_1.default.createElement(ink_1.Box, { flexDirection: "column", marginLeft: 2, marginRight: 2, marginTop: 1, marginBottom: 1 },
            react_1.default.createElement(ink_1.Box, { width: 80, textWrap: "wrap" },
                react_1.default.createElement(ink_1.Color, { red: true },
                    figures_1.default.cross,
                    " Error: ",
                    wrappedError.description)),
            wrappedError.notes.map(n => (react_1.default.createElement(ink_1.Box, { width: 80, textWrap: "wrap", key: n },
                react_1.default.createElement(ink_1.Color, { grey: true },
                    "\u21AA ",
                    n)))),
            react_1.default.createElement(ink_1.Box, { height: 2, width: 80, textWrap: "wrap", marginTop: 1 },
                react_1.default.createElement(ink_1.Color, { grey: true },
                    "If you are unable to resolve this issue,",
                    ' ',
                    react_1.default.createElement(ink_link_1.default, { url: "https://github.com/segmentio/typewriter/issues/new" }, "open an issue on GitHub"),
                    ". Please include that you are using version ",
                    react_1.default.createElement(ink_1.Color, { yellow: true }, package_json_1.version),
                    " of Typewriter."))));
    }
    return react_1.default.createElement(ink_1.Color, { red: true }, error);
};
//# sourceMappingURL=error.js.map